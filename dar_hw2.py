# -*- coding: utf-8 -*-
"""DAR HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vn_hr3V6WVgF3hlhVYXSIRzb8orUj8Hz
"""

import math as m
from scipy.stats import norm as sn

S0 = 49
K = 50
r = 0.05
q = 0
sigma = 0.2
T = 20/52

d1 = (m.log(S0/K) + (r - q + (sigma**2)/2)*T)/(sigma * m.sqrt(T))
d2 = (m.log(S0/K) + (r - q - (sigma**2)/2)*T)/(sigma * m.sqrt(T))

def call(S0, K, r, q, sigma, T):
  C = S0 * m.exp(-q*T)*sn.cdf(d1) - K*m.exp(-r*T)*sn.cdf(d2)
  return C
def put(S0, K, r, q, sigma, T):
  P = K*m.exp(-r*T)*sn.cdf(-d2) - S0 * m.exp(-q*T)*sn.cdf(-d1)
  return P

print('Call price: '+str(call(S0, K, r, q, sigma, T)))
print('Put price: '+str(put(S0, K, r, q, sigma, T)))

import math as m
from scipy.stats import norm as sn

print('You may put any other values!')
S0 = float(input('Underlying asset: '))
K = float(input('Strike price: '))
r = float(input('Risk-free interest(decimal): '))
q = float(input('Dividend rate(decimal): '))
sigma = float(input('Volatility: '))
T = float(input('Remaining maturity(decimal): '))

d1 = (m.log(S0/K) + (r - q + (sigma**2)/2)*T)/(sigma * m.sqrt(T))
def call(S0, K, r, q, sigma, T):
  C = S0 * m.exp(-q*T)*sn.cdf(d1) - K*m.exp(-r*T)*sn.cdf(d2)
  return C
def put(S0, K, r, q, sigma, T):
  P = K*m.exp(-r*T)*sn.cdf(-d2) - S0 * m.exp(-q*T)*sn.cdf(-d1)
  return P

print('Call price: '+str(call(S0, K, r, q, sigma, T)))
print('Put price: '+str(put(S0, K, r, q, sigma, T)))